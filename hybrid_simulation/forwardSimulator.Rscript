#!/usr/bin/env Rscript

##########################
##                      ##
##  Required Libraries  ##
##                      ##
##########################


library(data.table)
library(foreach)



########################
##                    ##
##  Argument Parsing  ##
##                    ##
########################

dmel <- TRUE

args <- commandArgs(trailingOnly=TRUE)

# Debugging args:
#   args <- c("-bed", "/mnt/internal_1/dmel-reconstruction/Dmel_recombination.bed", 
#           "-nfounders", "32", "-ngenerations", "5", "-n0", "1000", "-sex", 
#           "dioecious", "-rate", "1.0", "-recombination", "femaleOnly", 
#           "-stem", "test_01", "-nthreads", "12", 
#           "-vcf", "/mnt/internal_1/dmel-reconstruction/variants/dgrp2.2L.vcf")

args.env <- new.env()
for(i in seq(1, length(args), 2)) {
    args.env[[args[i]]] <- args[i+1]
}

bed_file <- args.env[["-bed"]]
popSize <- as.numeric(args.env[["-n0"]])
growthRate <- as.numeric(args.env[["-rate"]])
sexModel <- args.env[["-sex"]]
recombinationModel <- args.env[["-recombination"]]
n_founders <- as.numeric(args.env[["-nfounders"]])
only_chromosome <- args.env[["-only"]]
n_generations <- as.numeric(args.env[["-ngenerations"]])
n_threads <- as.numeric(args.env[["-nthreads"]])
vcf.filename <- args.env[["-vcf"]]

if(n_threads > 1) {
    library(doMC)
    registerDoMC(cores=n_threads)
}

##Print Parsed Arguments
#cat(c("recombination bed file:", bed_file, "\n"))
#cat(c("popSize:", popSize, "\n"))
#cat(c("stem:", stem, "\n"))
#cat(c("growthRate:", growthRate, "\n"))
#cat(c("recombination model:", recombinationModel, "\n"))
#cat(c("sex model:", sexModel, "\n"))
#
#cat(c("n_founders:", n_founders, "\n"))
#cat(c("n_generations:", n_generations, "\n"))
#cat(c("only_chromosome:", only_chromosome, "\n"))


#################
##             ##
##  Functions  ##
##             ##
#################


initializePopulation <- function(bed, n_founders, sexModel) {
    DT <- foreach(chromosome=unique(bed$chr), .combine="rbind") %do% {
        data.table(chromosome, haplotype=1:2, start=1, stop=max(bed[chr==chromosome]$stop))
    }
    DT <- DT[rep(1:.N, each=n_founders)]
    DT[,founderID:=rep(1:n_founders, length(chromosomes)*2)]
    if(sexModel=="dioecious") {
            DT <- DT[rep(1:.N, each=2)]
            DT[, sex := rep(c("M","F"), n_founders*length(chromosomes)*2)]
    } else if(sexModel=="hermaphroditic") {
        DT[, sex := "H"]
    }
    setkey(DT, founderID, sex, chromosome, haplotype, start, stop)
    DT[, ind := rleid(sex,founderID)]
    
    # remove 2nd X chromosome from males
    return(DT[! (sex=="M" & haplotype==2 & chromosome=="X")][])
}


getGamete <- function(pop, ind.i, haplotype.i, parSex, recombinant) {
    if(recombinant==FALSE) {
        # simply return random selection of alleles
        foreach(chromosome.i=chromosomes, .combine="rbind") %do% {

            dt.out <- pop[.(ind.i, chromosome.i, sample(1:2, size=1))]
            dt.out[, haplotype := haplotype.i]
            return(dt.out[,c("chromosome","haplotype","start","stop", "founderID")])
                }
    
    } else if(recombinant==TRUE) {
        # pull out individual and recombine
        
        foreach(chromosome.i = chromosomes, .combine="rbind") %do% {
            if(chromosome.i=="X" & parSex=="M") {
                breakpoints <- breakpoints <- c(0, chromosome_sizes[[chromosome.i]])
            } else {
                breakpoints <- unique(trunc(sort(recombination_function[[chromosome.i]](runif(rpois(1, lambda=recombination_rates[[chromosome.i]]))))))
                breakpoints <- c(0, breakpoints, chromosome_sizes[[chromosome.i]])
            }
            
            N.recomb <- length(breakpoints) - 2
            startHaplotype <- sample(c(1,2), size=1)

            
            ranges <- data.table( 
                "ind"=ind.i,
                "chromosome"=chromosome.i,
                "haplotype"=(((1 + startHaplotype) : (N.recomb + 1 + startHaplotype)) %% 2 + 1),
                "start"=1+breakpoints[1:(length(breakpoints)-1)],
                "stop"=breakpoints[2:length(breakpoints)])

            
            foreach(ind.i=ranges$ind, chromosome.i=ranges$chromosome, haplotype.j=ranges$haplotype,
                    start.i=ranges$start, stop.i=ranges$stop,.combine="rbind") %do% {
                    if(chromosome.i=="X" & parSex=="M") {
                        dt.out <- pop[.(ind.i, chromosome.i, haplotype.j)]
                        dt.out[,haplotype := haplotype.i]
                        return(dt.out[,c("chromosome","haplotype","start","stop", "founderID")])

                    } else {
                    dt.out <- pop[.(ind.i, chromosome.i, haplotype.j)][! (stop < start.i)  & ! (start > stop.i)]
                    dt.out[1,start := start.i]
                    dt.out[dim(dt.out)[1], stop := stop.i]
                    dt.out[,haplotype := haplotype.i]
                    return(dt.out[,c("chromosome","haplotype","start","stop", "founderID")])
                    }
            }
        }
    }
}

doSex <- function(pop, sexModel,n) {

    N.inds <- length(unique(pop$ind))
    if(sexModel=="hermaphroditic") {
        par1 <- sample(N.inds, size=1)
        par2 <- sample(N.inds, size=1)
    }else if(sexModel=="dioecious") {
        # pick first gamete
        par1 <- sample(N.inds, size=1)
        par1sex <- unique(pop[ind==par1]$sex)
        
        # pick second gamete from opposite sex
        par2 <- sample(unique(pop[sex!=par1sex]$ind), size=1)
        par2sex <- unique(pop[ind==par2]$sex)
    }
    g1 <- getGamete(pop, par1, 1, par1sex, ifelse(recombinationModel=="femaleOnly" & par1sex=="M", FALSE, TRUE))
    g2 <- getGamete(pop, par2, 2, par2sex, ifelse(recombinationModel=="femaleOnly" & par2sex=="M", FALSE, TRUE))
    ind.out <- rbindlist(list(g1,g2))[!is.na(founderID)]
    ind.out[,ind := n]
    if (length(unique(ind.out[chromosome=="X"]$haplotype))==1) {
        ind.out[, sex := "M"]
    } else {
        offspringSex <- ifelse(sexModel=="dioecious", "F", "H")
        ind.out[, sex := offspringSex]
    }
    return(ind.out[])
}

translateLandR <- function(DT, max2L=23100000, max3L=24600000) {
    splitting_chr2 <- DT[chromosome=="2" & max2L > start & max2L < stop]
    splitting_chr3 <- DT[chromosome=="3" & max3L > start & max3L < stop]

    # Restructure regions overlapping centromere on chromosome 2
    chr2L <- copy(splitting_chr2)
    chr2R <- copy(splitting_chr2)
    chr2L[, stop := max2L]
    chr2L[, chromosome := "2L"]
    chr2R[, start := 1]
    chr2R[, stop := stop - max2L]
    chr2R[, chromosome := "2R"]


    # Restructure regions overlapping centromere on chromosome 3
    chr3L <- copy(splitting_chr3)
    chr3R <- copy(splitting_chr3)
    chr3L[, stop := max3L]
    chr3L[, chromosome := "3L"]
    chr3R[, start := 1]
    chr3R[, stop := stop - max3L]
    chr3R[, chromosome := "3R"]

    # Restructure regions not overlapping centromere on chromosome 2
    dat.2Lor2R <- copy(DT[chromosome=="2"][stop < max2L | start > max2L])
    dat.2Lor2R[stop < max2L, chromosome := "2L"]
    dat.2Lor2R[start > max2L, chromosome := "2R"]
    dat.2Lor2R[chromosome=="2R", start := start - max2L]
    dat.2Lor2R[chromosome=="2R", stop := stop - max2L]

    # Restructure regions not overlapping centromere on chromosome 3
    dat.3Lor3R <- copy(DT[chromosome=="3"][stop < max3L | start > max3L])
    dat.3Lor3R[stop < max3L, chromosome := "3L"]
    dat.3Lor3R[start > max3L, chromosome := "3R"]
    dat.3Lor3R[chromosome=="3R", start := start - max3L]
    dat.3Lor3R[chromosome=="3R", stop := stop - max3L]

    # Keep chromosome X as is
    dat.X <- DT[chromosome=="X"]

    # Combine ranges
    dat.all <- rbindlist(list(
                dat.2Lor2R,
                dat.3Lor3R,
                chr2L,
                chr2R,
                chr3L,
                chr3R,
                dat.X
                ))

    # Reorder
    setkey(dat.all, ind, chromosome, haplotype, start)

    return(dat.all)
}

###########################
##                       ##
##  Recombination Rates  ##
##                       ##
###########################


# Load bed file
bed <- fread(bed_file, select=c(1:4))
setnames(bed, c("chr", "start", "stop", "c"))


# Correction for Drosophila
if(dmel==TRUE) {
    # stoare & add maximum value of 2L onto every start, stop for 2R
    # store & add maximum value of 3L onto every star,t stop for 3R
    # Reduce these later
    max2L <- max(bed[chr=="2L"]$stop)
    max3L <- max(bed[chr=="3L"]$stop)
    bed[chr=="2R", start := start + max2L]
    bed[chr=="2R", stop := stop + max2L]
    bed[chr=="3R", start := start + max3L]
    bed[chr=="3R", stop := stop + max3L]
    bed[chr %in% c("2L","2R"), chr := "2"]
    bed[chr %in% c("3L","3R"), chr := "3"]
}

if( ! is.null(only_chromosome)) {
    bed <- bed[chr==only_chromosome]
}


# Get list of unique chromosome names within .bed file
chromosomes <- unique(bed$chr)

# Convert c (cM per Mb) to Morgans
bed[, M := c/1000]

# Create hash table with chr -> expected value for number of recombination events
#   e.g.,
#   > recombination_rates[["2L"]]
#   [1] 0.5533038
recombination_rates <- new.env()
for(chromosome in chromosomes) {
    recombination_rates[[chromosome]] <- sum(bed[chr==chromosome]$M)       # convert c (cM per Megabase) to Morgans
}

chromosome_sizes <- new.env()
for(chromosome in chromosomes) {
    chromosome_sizes[[chromosome]] <- max(bed[chr==chromosome]$stop)
}



# Create hash table with random value (0,1) -> recombination position, via linear interpolation of scaled cumulative sum of recombination rates
bed[, cumulative_M := cumsum(M), by=chr]
bed[, scaled := cumulative_M/max(cumulative_M), by=chr]

genomeSize <- sum(bed[, list(size=max(stop)), by=chr]$size)

recombination_function <- new.env()
for(chromosome in chromosomes) {
    recombination_function[[as.character(chromosome)]] <- approxfun(bed[chr==chromosome]$scaled, bed[chr==chromosome]$start)
}

###############
##           ##
##  VCF IDs  ##
##           ##
###############

    # Extract header column from (possibly zgipped) vcf file
    lineIDs <- system(paste('zgrep -m 1 "^#CHROM" ', vcf.filename, sep=""), intern=TRUE)
    
    # Split by tab
    lineIDs <- unlist(strsplit(lineIDs, split="\t"))
    
    # Remove headings for columns 1-9 (leaving only the founder IDs)
    lineIDs <- lineIDs[10:length(lineIDs)]
    
    # Subset (size=N founders) founder IDs, in order that they appear in the header
    used_IDs <- lineIDs[sort(sample(length(lineIDs), size=n_founders, replace=FALSE))]    
    

################
##            ##
##  Run Code  ##
##            ##
################


# Initialize Population

    pop <- initializePopulation(bed, n_founders, sexModel)
    setkey(pop, ind, chromosome, haplotype, start)


# Iterate through generations

    for(i in 1:n_generations) {
        pop2 <- foreach(n=1:trunc((popSize*growthRate**i)), .combine="rbind", .inorder=FALSE) %dopar% {
            doSex(pop, sexModel, n)
        }
        setkey(pop2, ind, chromosome, haplotype, start)
        #write.table(pop2, file=paste(stem, "_", i, ".txt", sep=""), sep="\t", quote=FALSE, col.names=TRUE, row.names=FALSE)
        popSize <- trunc(popSize*growthRate)
        pop <- copy(pop2)
    }

# Translate founderID to lineID
    pop[, lineID := used_IDs[pop$founderID]]

# Remove numeric founderID column
    pop[, founderID := NULL]

# Corrections for Drosophila (splits "2" into "2L" + "2R"; "3" into "3L" + "3R")
    if(dmel == TRUE) { pop <- translateLandR(pop) }

# Sort haplotype map
    setkey(pop, ind, chromosome, haplotype, start)

# Write to file
    options(scipen=999)
    write.table(pop, file="population.haps", sep="\t", quote=FALSE, col.names=TRUE, row.names=FALSE)
    write.table(used_IDs, file="founders.txt", sep="\t", quote=FALSE, col.names=FALSE, row.names=FALSE)

########### END OF FILE: NEXT SECTION CONTINUES IN SECOND SCRIPT
